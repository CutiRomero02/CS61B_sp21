 Into different types of maps as <String, Integer> pairs.

What would you like L to be?: 10

Enter # strings to insert into hashmap.ULLMap: 10000
class hashmap.ULLMap: 0.34 sec

Enter # strings to insert into your hashmap.MyHashMap: 10000
class hashmap.MyHashMap: 0.01 sec

Enter # strings to insert into Java's HashMap: 10000
Java's Built-in HashMap: 0.01 sec

Would you like to try more timed-tests? (y/n)y

Enter # strings to insert into hashmap.ULLMap: 100000
--Stack Overflow -- couldn't add 100000 strings of length 10.

Enter # strings to insert into your hashmap.MyHashMap: 100000
class hashmap.MyHashMap: 0.09 sec

Enter # strings to insert into Java's HashMap: 100000
Java's Built-in HashMap: 0.03 sec

Would you like to try more timed-tests? (y/n)y

Enter # strings to insert into hashmap.ULLMap: 1
class hashmap.ULLMap: 0.00 sec

Enter # strings to insert into your hashmap.MyHashMap: 1000000
class hashmap.MyHashMap: 1.49 sec

Enter # strings to insert into Java's HashMap: 1000000
Java's Built-in HashMap: 0.41 sec

Would you like to try more timed-tests? (y/n)n

Process finished with exit code 0




 This program inserts lexicographically increasing Stringsinto Maps as <String, Integer> pairs.

Enter # strings to insert into hashmap.ULLMap: 10000
class hashmap.ULLMap: 0.38 sec

Enter # strings to insert into hashmap.MyHashMap: 100000
class hashmap.MyHashMap: 0.08 sec

Enter # strings to insert into Java's HashMap: 100000
Java's Built-in HashMap: 0.05 sec

Would you like to try more timed-tests? (y/n): y

Enter # strings to insert into hashmap.ULLMap: 1
class hashmap.ULLMap: 0.00 sec

Enter # strings to insert into hashmap.MyHashMap: 1000000
class hashmap.MyHashMap: 0.69 sec

Enter # strings to insert into Java's HashMap: 1000000
Java's Built-in HashMap: 0.45 sec

Would you like to try more timed-tests? (y/n): n

Process finished with exit code 0
